package com.xcontent.data.controller;

import com.xcontent.data.service.*;
import com.xcontent.data.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/api/cleanup")
public class DataCleanupController {
    @Autowired
    private DataCleanupService cleanupService;

    @PostMapping("/{dataType}")
    public ResponseEntity<Void> executeCleanup(
            @PathVariable String dataType) {
        
        cleanupService.executeCleanup(dataType);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/job/{jobId}")
    public ResponseEntity<CleanupResult> getCleanupResult(
            @PathVariable String jobId) {
        
        return ResponseEntity.ok(
            cleanupService.getCleanupResult(jobId)
        );
    }
}

@RestController
@RequestMapping("/api/archive")
public class ArchiveController {
    @Autowired
    private ArchiveService archiveService;

    @PostMapping
    public ResponseEntity<Void> createArchive(
            @RequestBody ArchiveRequest request) {
        
        archiveService.createArchive(request);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/{archiveId}/restore")
    public ResponseEntity<Void> restoreArchive(
            @PathVariable String archiveId) {
        
        archiveService.restoreArchive(archiveId);
        return ResponseEntity.ok().build();
    }
}

@RestController
@RequestMapping("/api/migration")
public class DataMigrationController {
    @Autowired
    private DataMigrationService migrationService;

    @PostMapping
    public ResponseEntity<Void> initiateMigration(
            @RequestBody MigrationConfig config) {
        
        migrationService.initiateMigration(config);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/status/{jobId}")
    public ResponseEntity<MigrationStatus> checkMigrationStatus(
            @PathVariable String jobId) {
        
        return ResponseEntity.ok(
            migrationService.checkMigrationStatus(jobId)
        );
    }

    @PostMapping("/{jobId}/rollback")
    public ResponseEntity<Void> rollbackMigration(
            @PathVariable String jobId) {
        
        migrationService.rollbackMigration(jobId);
        return ResponseEntity.ok().build();
    }
}

@RestController
@RequestMapping("/api/backup")
public class BackupRestoreController {
    @Autowired
    private BackupRestoreService backupService;

    @PostMapping
    public ResponseEntity<Void> createBackup(
            @RequestBody BackupRequest request) {
        
        backupService.createBackup(request);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/{backupId}/restore")
    public ResponseEntity<Void> restoreBackup(
            @PathVariable String backupId,
            @RequestBody RestoreOptions options) {
        
        backupService.restoreBackup(backupId, options);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/job/{jobId}")
    public ResponseEntity<BackupResult> getBackupResult(
            @PathVariable String jobId) {
        
        return ResponseEntity.ok(
            backupService.getBackupResult(jobId)
        );
    }

    @GetMapping("/restore/job/{jobId}")
    public ResponseEntity<RestoreResult> getRestoreResult(
            @PathVariable String jobId) {
        
        return ResponseEntity.ok(
            backupService.getRestoreResult(jobId)
        );
    }
}
