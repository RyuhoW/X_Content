package com.xcontent.integration.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.sns.SnsClient;
import com.slack.api.Slack;
import org.gitlab4j.api.GitLabApi;

@Configuration
@EnableAsync
public class IntegrationConfig {

    @Bean
    public S3Client s3Client() {
        return S3Client.builder()
            .build();
    }

    @Bean
    public SnsClient snsClient() {
        return SnsClient.builder()
            .build();
    }

    @Bean
    public Slack slackClient() {
        return Slack.getInstance();
    }

    @Bean
    public GitLabApi gitLabApi(
            @Value("${gitlab.api.url}") String gitLabUrl,
            @Value("${gitlab.api.token}") String gitLabToken) {
        return new GitLabApi(gitLabUrl, gitLabToken);
    }
}

@Configuration
public class StorageConfig {
    
    @Value("${storage.type}")
    private String storageType;

    @Bean
    public StorageService storageService() {
        switch (storageType.toLowerCase()) {
            case "s3":
                return new S3StorageService();
            case "gcs":
                return new GCSStorageService();
            case "azure":
                return new AzureStorageService();
            default:
                return new LocalStorageService();
        }
    }
}

@Configuration
public class NotificationConfig {
    
    @Value("${notification.channels}")
    private List<String> channels;

    @Bean
    public NotificationService notificationService() {
        NotificationServiceImpl service = new NotificationServiceImpl();
        channels.forEach(channel -> {
            service.addChannel(createNotificationChannel(channel));
        });
        return service;
    }

    private NotificationChannel createNotificationChannel(String type) {
        switch (type.toLowerCase()) {
            case "slack":
                return new SlackNotificationChannel();
            case "email":
                return new EmailNotificationChannel();
            case "sns":
                return new SNSNotificationChannel();
            default:
                throw new IllegalArgumentException("Unknown channel type: " + type);
        }
    }
}
