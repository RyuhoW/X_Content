package com.xcontent.service;

import com.xcontent.model.CacheScheduleExecutionLog;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;
import java.util.List;

@Slf4j
@Service
public class NotificationService {
    
    @Autowired
    private JavaMailSender emailSender;
    
    @Autowired
    private RestTemplate restTemplate;

    private final String slackWebhookUrl = "https://hooks.slack.com/services/YOUR_WEBHOOK_URL";
    private final String emailRecipient = "admin@example.com";

    public void sendAlert(String alertType, String message, CacheScheduleExecutionLog executionLog) {
        log.warn("Alert: {} - {}", alertType, message);
        sendEmailAlert(alertType, message, executionLog);
        sendSlackAlert(alertType, message, executionLog);
    }

    private void sendEmailAlert(String alertType, String message, CacheScheduleExecutionLog executionLog) {
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setTo(emailRecipient);
        mailMessage.setSubject("Cache Alert: " + alertType);
        mailMessage.setText(buildEmailBody(message, executionLog));
        emailSender.send(mailMessage);
    }

    private String buildEmailBody(String message, CacheScheduleExecutionLog executionLog) {
        StringBuilder body = new StringBuilder();
        body.append(message).append("\n\n");
        
        if (executionLog != null) {
            body.append("Execution Details:\n");
            body.append("Cache: ").append(executionLog.getCacheName()).append("\n");
            body.append("Schedule ID: ").append(executionLog.getScheduleId()).append("\n");
            body.append("Start Time: ").append(executionLog.getStartTime()).append("\n");
            body.append("Duration: ").append(executionLog.getDuration()).append("ms\n");
            body.append("Status: ").append(executionLog.getStatus()).append("\n");
        }

        return body.toString();
    }
}
    /**
     * Ã£Æ’Â¬Ã£Æ’ÂÃ£Æ’Â¼Ã£Æ’Ë†Ã£ÂÂ®Ã©â‚¬ÂÃ¤Â¿Â¡
     */
    public void sendReport(String reportType, String reportContent) {
        // Ã£Æ’Â¡Ã£Æ’Â¼Ã£Æ’Â«Ã©â‚¬ÂÃ¤Â¿Â¡
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setTo(emailRecipient);
        mailMessage.setSubject("Cache Execution Report - " + reportType);
        mailMessage.setText(reportContent);
        emailSender.send(mailMessage);

        // SlackÃ©â‚¬ÂÃ¤Â¿Â¡Ã¯Â¼Ë†Ã¨Â¦ÂÃ§Â´â€žÃ§â€°Ë†Ã¯Â¼â€°
        String[] lines = reportContent.split("\n");
        StringBuilder slackMessage = new StringBuilder();
        slackMessage.append("*Cache Execution Report - ").append(reportType).append("*\n\n");
        
        // Ã©â€¡ÂÃ¨Â¦ÂÃ£ÂÂªÃ§ÂµÂ±Ã¨Â¨Ë†Ã¦Æ’â€¦Ã¥Â Â±Ã£ÂÂ®Ã£ÂÂ¿Ã£â€šâ€™Ã¦Å Â½Ã¥â€¡Âº
        for (String line : lines) {
            if (line.contains("Success Rate") || 
                line.contains("Total Executions") ||
                line.contains("Error Count")) {
                slackMessage.append(line).append("\n");
            }
        }

        Map<String, Object> slackPayload = Map.of(
            "text", slackMessage.toString(),
            "attachments", List.of(
                Map.of(
                    "color", "#36a64f",
                    "text", "Ã¨Â©Â³Ã§Â´Â°Ã£ÂÂ¯Ã£Æ’Â¡Ã£Æ’Â¼Ã£Æ’Â«Ã£â€šâ€™Ã£Ââ€Ã§Â¢ÂºÃ¨ÂªÂÃ£ÂÂÃ£ÂÂ Ã£Ââ€¢Ã£Ââ€žÃ£â‚¬â€š"
                )
            )
        );

        restTemplate.postForEntity(slackWebhookUrl, slackPayload, String.class);
    }
