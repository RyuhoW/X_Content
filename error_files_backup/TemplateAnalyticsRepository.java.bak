package com.xcontent.repository;

import com.xcontent.model.*;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.*;

@Repository
public interface TemplateAnalyticsRepository extends MongoRepository<TemplateAnalytics, String> {
    List<TemplateAnalytics> findByTemplateIdAndVersion(
        String templateId,
        String version
    );
    List<TemplateAnalytics> findByTypeAndStartTimeBetween(
        AnalyticsType type,
        Long startTime,
        Long endTime
    );
}

@Repository
public interface TemplateMetricsRepository extends MongoRepository<TemplateMetrics, String> {
    long countByTemplateIdAndVersion(String templateId, String version);

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'timestamp': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": "$userId", "count": { "$sum": 1 } })
    long countUniqueUsers(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'timestamp': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "avg": { "$avg": "$value" } })
    double calculateAverageProcessingTime(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'timestamp': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "rate": { "$avg": { "$cond": [ { "$eq": ["$success", true] }, 1, 0 ] } } })
    double calculateSuccessRate(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'timestamp': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "usage": { "$sum": 1 } })
    Double calculateUsage(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'timestamp': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "performance": { "$avg": "$value" } })
    Double calculatePerformance(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );
}

@Repository
public interface TemplateErrorRepository extends MongoRepository<TemplateError, String> {
    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": "$type", "count": { "$sum": 1 } })
    Map<ErrorType, Long> countByTypeAndTimeRange(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": "$context.component", "count": { "$sum": 1 } })
    Map<String, Long> countByComponentAndTimeRange(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    List<ErrorTrend> findErrorTrends(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "errors": { "$sum": 1 } })
    Double calculateErrors(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "rate": { "$avg": { "$cond": [ { "$eq": ["$type", "ERROR"] }, 1, 0 ] } } })
    Double calculateErrorRate(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": null, "avgTime": { "$avg": "$resolutionTime" } })
    Double calculateAverageResolutionTime(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );

    @Query(value = "{ 'templateId': ?0, 'version': ?1, 'occurredAt': { $gte: ?2, $lte: ?3 } }",
           group = { "_id": "$severity", "count": { "$sum": 1 } })
    Map<ErrorSeverity, Long> calculateSeverityDistribution(
        String templateId,
        String version,
        Long startTime,
        Long endTime
    );
}
